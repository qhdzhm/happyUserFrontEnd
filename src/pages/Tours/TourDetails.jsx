import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Container, Row, Col, Tab, Nav, Accordion, Button, Badge, Card, Form, Spinner, Alert, Modal } from 'react-bootstrap';
import { Link, useParams, useNavigate, useLocation } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import ImageGallery from 'react-image-gallery';
import { Helmet } from 'react-helmet-async';
import { FaMapMarkerAlt, FaCalendarAlt, FaUsers, FaLanguage, FaCheck, FaTimes, FaStar, FaStarHalfAlt, FaRegStar, FaPhoneAlt, FaClock, FaInfoCircle, FaQuestionCircle, FaLightbulb, FaUtensils, FaBed, FaHiking, FaChevronDown, FaChevronUp, FaQuoteLeft, FaQuoteRight, FaHotel, FaChild, FaTicketAlt, FaPercent, FaChevronLeft, FaChevronRight } from 'react-icons/fa';
import { getTourById, getGroupTourById, getDayTourById, getAgentDiscountRate, calculateTourDiscount } from '../../utils/api';
import { addToCart } from '../../store/slices/bookingSlice';
import { formatDate, calculateDiscountPrice } from '../../utils/helpers';
import PriceDisplay from '../../components/PriceDisplay';
import CustomerReviews from '../../components/CustomerReviews/CustomerReviews';
import BaiduSEO from '../../components/BaiduSEO/BaiduSEO';
import './tourDetails.css';
import 'react-image-gallery/styles/css/image-gallery.css';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { getHotelPrices, calculateTourPrice } from '../../services/bookingService';

// ÂØºÂÖ•ÈªòËÆ§ÂõæÁâá
import defaultImage from '../../assets/images/new/1.jpg';

// Êó•ÊúüÈÄâÊã©Âô®Ëá™ÂÆö‰πâÊ†∑Âºè
const datePickerStyles = {
  zIndex: 9999,
  position: 'relative'
};

// ‰∏ªÈ¢òËâ≤
const themeColor = "#ff6b6b";

const TourDetails = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [startDate, setStartDate] = useState(() => {
    const date = new Date();
    return isNaN(date.getTime()) ? new Date() : date;
  });
  const [endDate, setEndDate] = useState(() => {
    const date = new Date();
    date.setDate(date.getDate() + 7); // ÈªòËÆ§ÁªìÊùüÊó•Êúü‰∏∫7Â§©Âêé
    return isNaN(date.getTime()) ? new Date() : date;
  });
  const [adultCount, setAdultCount] = useState(1);
  const [childCount, setChildCount] = useState(0);
  const [roomCount, setRoomCount] = useState(1);
  const [selectedAdultCount, setSelectedAdultCount] = useState(1); // Áî®Êà∑ÈÄâÊã©ÁöÑÊàê‰∫∫Êï∞Èáè
  const [selectedChildCount, setSelectedChildCount] = useState(0); // Áî®Êà∑ÈÄâÊã©ÁöÑÂÑøÁ´•Êï∞Èáè
  const [selectedRoomCount, setSelectedRoomCount] = useState(1); // Áî®Êà∑ÈÄâÊã©ÁöÑÊàøÈó¥Êï∞Èáè
  const [selectedDate, setSelectedDate] = useState(() => {
    const date = new Date();
    return isNaN(date.getTime()) ? new Date() : date;
  }); // Áî®Êà∑ÈÄâÊã©ÁöÑÊó•Êúü - Á°Æ‰øùÂàùÂßãÂåñ‰∏∫ÊúâÊïàDateÂØπË±°
  const [requiresDateSelection, setRequiresDateSelection] = useState(false); // ÊòØÂê¶ÈúÄË¶ÅÈÄâÊã©Êó•Êúü
  // ÁßªÈô§ calculatedPrice Áä∂ÊÄÅÔºåÁõ¥Êé•‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [tourData, setTourData] = useState(null);
  const [tourType, setTourType] = useState('');
  const [itinerary, setItinerary] = useState([]);
  const [highlights, setHighlights] = useState([]);
  const [inclusions, setInclusions] = useState([]);
  const [exclusions, setExclusions] = useState([]);
  const [faqs, setFaqs] = useState([]);
  const [tips, setTips] = useState([]);
  const [images, setImages] = useState([]);
  const [discountedPrice, setDiscountedPrice] = useState(null);
  const [loadingDiscount, setLoadingDiscount] = useState(false);
  const [activeIndex, setActiveIndex] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [selectedHotelLevel, setSelectedHotelLevel] = useState('4Êòü');
  const [hotelPrices, setHotelPrices] = useState([]);
  const [hotelPriceDifference, setHotelPriceDifference] = useState(0);
  const [isPriceLoading, setIsPriceLoading] = useState(false);
  const [totalPrice, setTotalPrice] = useState(null);
  const [priceDebounceTimer, setPriceDebounceTimer] = useState(null); // Ê∑ªÂä†Èò≤ÊäñÂÆöÊó∂Âô®Áä∂ÊÄÅ
  const [reviews, setReviews] = useState([]);
  const [showAllReviews, setShowAllReviews] = useState(false);
  const [childrenAges, setChildrenAges] = useState([]);
  const [showChildAgeInputs, setShowChildAgeInputs] = useState(false);
  
  const { id } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const { isAuthenticated, user, userType } = useSelector(state => state.auth);
  const dispatch = useDispatch();
  
  // Â§ÑÁêÜÈòøÈáå‰∫ëOSSÂõæÁâáURLÔºåËß£ÂÜ≥CORSÈóÆÈ¢ò
  const proxyImageUrl = (url) => {
    if (!url) return '';
    
    console.log('Â§ÑÁêÜÂõæÁâáURL:', url);
    
    // È¶ñÂÖàÂ∞ùËØïÁõ¥Êé•‰ΩøÁî®ÂéüURL
    return url;
    
    // Â¶ÇÊûúCORSÊúâÈóÆÈ¢òÔºåÂèØ‰ª•ÂêØÁî®‰∏ãÈù¢ÁöÑ‰ª£ÁêÜÊúçÂä°
    // return `https://images.weserv.nl/?url=${encodeURIComponent(url)}`;
  };
  
  // Â§ÑÁêÜÊêúÁ¥¢ÂèÇÊï∞
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    
    // Ë∞ÉËØïÔºöÊâìÂç∞ÊâÄÊúâURLÂèÇÊï∞
    console.log('üîç ÂΩìÂâçURLÂèÇÊï∞:', Object.fromEntries(searchParams));
    console.log('üîç ÂΩìÂâçÊàê‰∫∫Êï∞ÈáèÁä∂ÊÄÅ:', { adultCount, selectedAdultCount });
    
    // ‰ªéÊêúÁ¥¢ÂèÇÊï∞‰∏≠Ëé∑ÂèñÂπ∂ËÆæÁΩÆÁõ∏ÂÖ≥ÂÄº
    const fromSearch = searchParams.get('fromSearch');
    if (fromSearch === 'true') {
      console.log('‰ªéÊêúÁ¥¢È°µÈù¢Ë∑≥ËΩ¨ÔºåÂ§ÑÁêÜÊêúÁ¥¢ÂèÇÊï∞...');
      
      // Â§ÑÁêÜÊó•ÊúüÂèÇÊï∞
      const startDateParam = searchParams.get('startDate');
      if (startDateParam) {
        const parsedStartDate = new Date(startDateParam);
        if (!isNaN(parsedStartDate.getTime()) && parsedStartDate.getTime() > 0) {
          setStartDate(parsedStartDate);
          setSelectedDate(parsedStartDate);
          console.log('ËÆæÁΩÆÂºÄÂßãÊó•Êúü:', parsedStartDate);
        } else {
          console.warn('Êó†ÊïàÁöÑÂºÄÂßãÊó•ÊúüÂèÇÊï∞:', startDateParam);
        }
      }
      
      const endDateParam = searchParams.get('endDate');
      if (endDateParam) {
        const parsedEndDate = new Date(endDateParam);
        if (!isNaN(parsedEndDate.getTime()) && parsedEndDate.getTime() > 0) {
          setEndDate(parsedEndDate);
          console.log('ËÆæÁΩÆÁªìÊùüÊó•Êúü:', parsedEndDate);
        } else {
          console.warn('Êó†ÊïàÁöÑÁªìÊùüÊó•ÊúüÂèÇÊï∞:', endDateParam);
        }
      }
      
      // Â§ÑÁêÜ‰∫∫Êï∞ÂèÇÊï∞
      const adultsParam = searchParams.get('adults');
      if (adultsParam && !isNaN(parseInt(adultsParam))) {
        const adults = parseInt(adultsParam);
        setAdultCount(adults);
        setSelectedAdultCount(adults);
        console.log('‰ªéURLÂèÇÊï∞ËÆæÁΩÆÊàê‰∫∫Êï∞Èáè:', adults);
      } else {
        // Â¶ÇÊûúÊ≤°ÊúâURLÂèÇÊï∞ÔºåÁ°Æ‰øù‰ΩøÁî®ÈªòËÆ§ÁöÑ1‰∫∫
        console.log('Ê≤°ÊúâURLÂèÇÊï∞Ôºå‰ΩøÁî®ÈªòËÆ§Êàê‰∫∫Êï∞Èáè: 1');
        setAdultCount(1);
        setSelectedAdultCount(1);
      }
      
      const childrenParam = searchParams.get('children');
      if (childrenParam && !isNaN(parseInt(childrenParam))) {
        const children = parseInt(childrenParam);
        setChildCount(children);
        setSelectedChildCount(children);
        console.log('ËÆæÁΩÆÂÑøÁ´•Êï∞Èáè:', children);
        
        // Â¶ÇÊûúÊúâÂÑøÁ´•ÔºåÈúÄË¶ÅËÆæÁΩÆÂπ¥ÈæÑËæìÂÖ•
        if (children > 0) {
          setShowChildAgeInputs(true);
          setChildrenAges(new Array(children).fill(8)); // ÈªòËÆ§Âπ¥ÈæÑ‰∏∫8Â≤Å
        }
      }
    }
  }, [location.search]);
  
  // ‰ªéURLË∑ØÂæÑÂíåÊü•ËØ¢ÂèÇÊï∞‰∏≠Á°ÆÂÆöÁ±ªÂûã
  const determineType = () => {
    // 1. È¶ñÂÖà‰ªéË∑ØÂæÑ‰∏≠Âà§Êñ≠ÔºåËøôÊòØÊúÄ‰ºòÂÖàÁöÑ
    if (location.pathname.includes('/day-tours/')) {
      return 'day';
    } else if (location.pathname.includes('/group-tours/')) {
      return 'group';
    }
    
    // 2. ‰ªéÊü•ËØ¢ÂèÇÊï∞‰∏≠Ëé∑Âèñ
    const searchParams = new URLSearchParams(location.search);
    const typeParam = searchParams.get('type');
    if (typeParam) {
      return typeParam;
    }
    
    // 3. ÈªòËÆ§ÂÄº
    return 'day';
  };
  
  // Ëé∑ÂèñÁ±ªÂûãÂèÇÊï∞
  const type = determineType();
  
  // Âà§Êñ≠ÊòØÂê¶‰∏∫‰ª£ÁêÜÂïÜ
  const isAgent = userType === 'agent' || localStorage.getItem('userType') === 'agent';
  const agentId = user?.agentId || localStorage.getItem('agentId');
  const discountRate = user?.discountRate || localStorage.getItem('discountRate');

  // ÁîüÊàêÁªìÊûÑÂåñÊï∞ÊçÆ
  const generateStructuredData = () => {
    if (!tourData) return {};

    const basePrice = tourData.price || tourData.adultPrice || 0;
    const finalPrice = discountedPrice || basePrice;

    return {
      "@context": "https://schema.org/",
      "@type": "TouristTrip",
      "name": tourData.title || tourData.name,
      "description": tourData.description || tourData.intro || tourData.des,
      "image": images.length > 0 ? images.map(img => img.original) : [tourData.coverImage],
      "url": `https://www.htas.com.au/tours/${id}?type=${type}`,
      "provider": {
        "@type": "TravelAgency",
        "name": "HTAS - Â°îÊñØÈ©¨Â∞º‰∫öÂçé‰∫∫ÊóÖÊ∏∏",
        "url": "https://www.htas.com.au",
        "telephone": "+61-3-6234-5678",
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "Hobart",
          "addressRegion": "Tasmania",
          "addressCountry": "AU"
        }
      },
      "offers": {
        "@type": "Offer",
        "price": finalPrice,
        "priceCurrency": "AUD",
        "availability": "https://schema.org/InStock",
        "validFrom": new Date().toISOString(),
        "priceValidUntil": new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
      },
      "aggregateRating": tourData.averageRating ? {
        "@type": "AggregateRating",
        "ratingValue": tourData.averageRating,
        "reviewCount": tourData.reviewCount || reviews.length,
        "bestRating": "5",
        "worstRating": "1"
      } : undefined,
      "duration": tourType === 'day' ? "P1D" : `P${tourData.duration || 1}D`,
      "touristType": ["Family", "Individual", "Group"],
      "includesAttraction": highlights.map(highlight => ({
        "@type": "TouristAttraction",
        "name": highlight
      }))
    };
  };

  // ÁîüÊàêFAQÁªìÊûÑÂåñÊï∞ÊçÆ
  const generateFAQStructuredData = () => {
    if (!faqs || faqs.length === 0) return {};

    return {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": faqs.map(faq => ({
        "@type": "Question",
        "name": faq.question,
        "acceptedAnswer": {
          "@type": "Answer",
          "text": faq.answer
        }
      }))
    };
  };

  // Ëé∑Âèñ‰ªäÂ§©ÁöÑÊó•Êúü‰Ωú‰∏∫ÊúÄÂ∞èÊó•Êúü
  const today = new Date().toISOString().split('T')[0];

  const fetchingRef = useRef(false); // Áî®‰∫éËøΩË∏™ËØ∑Ê±ÇÁä∂ÊÄÅ
  const fetchTimeoutRef = useRef(null); // Áî®‰∫éÂ≠òÂÇ®Èò≤ÊäñÂÆöÊó∂Âô®
  const retryCountRef = useRef(0); // Áî®‰∫éËøΩË∏™ÈáçËØïÊ¨°Êï∞
  const MAX_RETRIES = 2; // ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞

  // Áî®‰∫éÈò≤Ê≠¢ÈáçÂ§çÂä†ËΩΩÈÖíÂ∫ó‰ª∑Ê†ºÁöÑÊ†áÂøó
  const initialLoadRef = useRef(false);

  // Áî®‰∫éË∑üË∏™APIË∞ÉÁî®Áä∂ÊÄÅÁöÑÊ†áÂøó
  const isCallingApiRef = useRef(false);

  // Áî®‰∫éÈò≤Ê≠¢ÈÖíÂ∫ó‰ª∑Ê†ºAPIÈáçÂ§çË∞ÉÁî®ÁöÑËÆ°Êï∞Âô®
  const hotelPriceApiCallCountRef = useRef(0);

  // ‰ΩøÁî®refËÆ∞ÂΩïÊúÄÂêé‰∏ÄÊ¨°ËØ∑Ê±ÇÁöÑID
  const lastRequestIdRef = useRef(0);

  // Ê†ºÂºèÂåñÊó•ÊúüÊòæÁ§∫
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('zh-CN', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric'
    });
  };

  useEffect(() => {
    const fetchTourDetails = async () => {
      // Â¶ÇÊûúÂ∑≤ÁªèÂú®ËØ∑Ê±Ç‰∏≠ÔºåÁõ¥Êé•ËøîÂõû
      if (fetchingRef.current) {
        console.log('ËØ∑Ê±ÇÂ∑≤Âú®ËøõË°å‰∏≠ÔºåË∑≥ËøáÈáçÂ§çËØ∑Ê±Ç');
        return;
      }

      try {
        // Ê†áËÆ∞‰∏∫Ê≠£Âú®ËØ∑Ê±Ç
        fetchingRef.current = true;
        setLoading(true);
        setError(null);
        
        // Á°ÆÂÆöËé∑ÂèñÁöÑÊóÖÊ∏∏Á±ªÂûãÂíåID
        const tourId = id;
        // ‰ªéURLË∑ØÂæÑÂíåÁ±ªÂûãÂèÇÊï∞Á°ÆÂÆöAPIÁ±ªÂûã
        const apiTourType = type === 'day' ? 'day' : 'group';
        
        console.log(`Ëé∑ÂèñÊóÖÊ∏∏‰ø°ÊÅØ: ID=${tourId}, Á±ªÂûã=${apiTourType}`);
        
        // ËÆæÁΩÆÈ°µÈù¢Áä∂ÊÄÅ
        setTourType(apiTourType === 'day' ? 'day_tour' : 'group_tour');
        
        // Ëé∑ÂèñÊóÖÊ∏∏ËØ¶ÊÉÖ
        let response;
        try {
          response = await getTourById(tourId, apiTourType);
        } catch (error) {
          console.error(`Ëé∑Âèñ${apiTourType}Á±ªÂûãÊóÖÊ∏∏Êï∞ÊçÆÂ§±Ë¥•:`, error);
          response = null;
        }
        
        // Â¶ÇÊûúÊ≤°ÊúâËé∑ÂèñÂà∞Êï∞ÊçÆÔºåÂ∞ùËØïÂè¶‰∏ÄÁßçÁ±ªÂûã
        if (!response || !response.data) {
          const alternativeType = apiTourType === 'day' ? 'group' : 'day';
          console.log(`Â∞ùËØïËé∑Âèñ${alternativeType}Á±ªÂûãÊóÖÊ∏∏Êï∞ÊçÆ...`);
          
          try {
            response = await getTourById(tourId, alternativeType);
            
            if (response && response.data) {
              console.log(`ÊàêÂäü‰ΩøÁî®${alternativeType}Á±ªÂûãËé∑ÂèñÊï∞ÊçÆ`);
              // Êõ¥Êñ∞Á±ªÂûã
              setTourType(alternativeType === 'day' ? 'day_tour' : 'group_tour');
            }
          } catch (altError) {
            console.error(`Ëé∑Âèñ${alternativeType}Á±ªÂûãÊóÖÊ∏∏Êï∞ÊçÆ‰πüÂ§±Ë¥•:`, altError);
          }
        }
        
        // Â§ÑÁêÜËé∑ÂèñÂà∞ÁöÑÊóÖÊ∏∏Êï∞ÊçÆ
        if (response && response.code === 1 && response.data) {
          const tourData = response.data;
          console.log('Ëé∑ÂèñÂà∞ÁöÑÊóÖÊ∏∏Êï∞ÊçÆ:', tourData);
          setTourData(tourData);
          
          // Â§ÑÁêÜÁ±ªÂûãÁâπÂÆöÁöÑÊï∞ÊçÆ
          processTourData(tourData, apiTourType);
        } else {
          console.error('Êó†Ê≥ïËé∑ÂèñÊúâÊïàÁöÑÊóÖÊ∏∏Êï∞ÊçÆ:', response);
          setError('Êó†Ê≥ïËé∑ÂèñÊóÖÊ∏∏Êï∞ÊçÆÔºåËØ∑Á®çÂêéÈáçËØï');
          setImages([]);
        }
        
        // ËØ∑Ê±ÇÂÆåÊàêÔºåÈáçÁΩÆÁä∂ÊÄÅ
        fetchingRef.current = false;
        retryCountRef.current = 0;
        setLoading(false);
      } catch (err) {
        console.error('Ëé∑ÂèñÊóÖÊ∏∏ËØ¶ÊÉÖÂ§±Ë¥•:', err);
        setError('Ëé∑ÂèñÊóÖÊ∏∏ËØ¶ÊÉÖÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
        fetchingRef.current = false;
        setLoading(false);
        setImages([]);
      }
    };
    
    const processTourData = (tourData, tourType) => {
      try {
        // Â§ÑÁêÜÂü∫Êú¨Êï∞ÊçÆ
        if (tourData.highlights) setHighlights(Array.isArray(tourData.highlights) ? tourData.highlights : [tourData.highlights]);
        if (tourData.inclusions) setInclusions(Array.isArray(tourData.inclusions) ? tourData.inclusions : [tourData.inclusions]);
        if (tourData.exclusions) setExclusions(Array.isArray(tourData.exclusions) ? tourData.exclusions : [tourData.exclusions]);
        if (tourData.faqs) setFaqs(Array.isArray(tourData.faqs) ? tourData.faqs : [tourData.faqs]);
        if (tourData.tips) setTips(Array.isArray(tourData.tips) ? tourData.tips : [tourData.tips]);
        
        // Â§ÑÁêÜË°åÁ®ã
        if (tourData.itinerary) {
          if (tourType === 'day') {
            setItinerary(Array.isArray(tourData.itinerary) ? tourData.itinerary.map(item => ({
              ...item,
              day_number: 1,
              type: 'time_slot'
            })) : [{
              day_number: 1,
              type: 'time_slot',
              description: tourData.itinerary
            }]);
          } else {
            setItinerary(Array.isArray(tourData.itinerary) ? tourData.itinerary : [tourData.itinerary]);
          }
        }
        
        // Â§ÑÁêÜÂõæÁâá
        processImages(tourData);
      } catch (processError) {
        console.error('Â§ÑÁêÜÊóÖÊ∏∏Êï∞ÊçÆÊó∂Âá∫Èîô:', processError);
      }
    };
    
    const processImages = (tourData) => {
      try {
        console.log('ÂºÄÂßãÂ§ÑÁêÜÂõæÁâáÊï∞ÊçÆ:', tourData);
        console.log('ÂõæÁâáÁõ∏ÂÖ≥Â≠óÊÆµÊ£ÄÊü•:', {
          hasImages: tourData?.images,
          imagesLength: tourData?.images?.length,
          hasCoverImage: !!tourData?.coverImage,
          coverImage: tourData?.coverImage
        });
        
        if (tourData && tourData.images && Array.isArray(tourData.images) && tourData.images.length > 0) {
          // Â≠òÂú®Â§öÂº†ÂõæÁâáÔºåÁõ¥Êé•‰ΩøÁî®ÂêéÁ´ØÊèê‰æõÁöÑÂõæÁâáÊï∞ÁªÑ
          console.log('Â§ÑÁêÜÂêéÁ´ØÊèê‰æõÁöÑÂ§öÂº†ÂõæÁâáÔºö', tourData.images.length, 'Âº†');
          console.log('ÂõæÁâáÊï∞ÁªÑËØ¶ÊÉÖ:', tourData.images);
          
          const galleryImages = tourData.images.map((img, index) => {
            // ÂØπÈòøÈáå‰∫ëOSSÂõæÁâáURLËøõË°åÂ§ÑÁêÜ‰ª•Ëß£ÂÜ≥CORSÈóÆÈ¢ò
            const imageUrl = img.image_url ? proxyImageUrl(img.image_url) : '';
            console.log(`Â§ÑÁêÜÁ¨¨${index + 1}Âº†ÂõæÁâá:`, img.image_url, '->', imageUrl);
            
            return {
              original: imageUrl,
              thumbnail: imageUrl,
              description: img.description || `${tourData?.title || tourData?.name} ÂõæÁâá ${index + 1}`,
              originalAlt: img.description || `${tourData?.title || tourData?.name} ÂõæÁâá`,
              thumbnailAlt: img.description || `${tourData?.title || tourData?.name} Áº©Áï•Âõæ`,
              location: tourData?.location || 'Â°îÊñØÈ©¨Â∞º‰∫ö'
            };
          });
          console.log('ËΩÆÊí≠ÂõæÊï∞ÊçÆÂ§ÑÁêÜÂÆåÊàê:', galleryImages);
          setImages(galleryImages);
        } else if (tourData && tourData.coverImage) {
          // Âè™ÊúâÂ∞ÅÈù¢Âõæ
          console.log('‰ΩøÁî®Â∞ÅÈù¢Âõæ:', tourData.coverImage);
          const coverImageUrl = proxyImageUrl(tourData.coverImage);
          
          setImages([
            {
              original: coverImageUrl,
              thumbnail: coverImageUrl,
              description: tourData?.description?.slice(0, 100) || `${tourData?.title || tourData?.name} Â∞ÅÈù¢Âõæ`,
              originalAlt: tourData?.title || tourData?.name,
              thumbnailAlt: `${tourData?.title || tourData?.name} Áº©Áï•Âõæ`,
              location: tourData?.location || 'Â°îÊñØÈ©¨Â∞º‰∫ö'
            }
          ]);
        } else {
          // Ê≤°ÊúâÂõæÁâáÔºåËøîÂõûÁ©∫Êï∞ÁªÑ
          console.log('Ê≤°ÊúâÊâæÂà∞ÂõæÁâáÊï∞ÊçÆÔºåËÆæÁΩÆÁ©∫Êï∞ÁªÑ');
          setImages([]);
        }
      } catch (error) {
        console.error('Â§ÑÁêÜÂõæÁâáÊó∂Âá∫Èîô:', error);
        setImages([]);
      }
    };
    
    // Ëé∑ÂèñÊï∞ÊçÆ
    fetchTourDetails();
    
    // Ê∏ÖÁêÜÂáΩÊï∞
    return () => {
      if (fetchTimeoutRef.current) {
        clearTimeout(fetchTimeoutRef.current);
      }
    };
  }, [id, location.pathname, location.search]);

  // Ëé∑ÂèñÊäòÊâ£‰ª∑Ê†º
  const fetchDiscountPrice = async () => {
    if (tourData && isAgent && agentId && !loadingDiscount) {
      try {
        setLoadingDiscount(true);
        console.log('ÂºÄÂßãËÆ°ÁÆóÊäòÊâ£‰ª∑Ê†º:', { tourData, isAgent, agentId });
        
        // Á°Æ‰øù‰ª∑Ê†º‰∏∫Êï∞ÂÄº
        const originalPrice = Number(tourData.price) || 0;
        const tourId = Number(id) || 0;
        
        if (originalPrice <= 0 || tourId <= 0) {
          console.warn('‰ª∑Ê†ºÊàñIDÊó†ÊïàÔºåÊó†Ê≥ïËÆ°ÁÆóÊäòÊâ£', { originalPrice, tourId });
          setDiscountedPrice(originalPrice);
          setLoadingDiscount(false);
          return;
        }
        
        // Á°ÆÂÆöÊóÖÊ∏∏Á±ªÂûã
        let effectiveTourType;
        
        // ÊåâÁÖßÂ∏∏ËßÑÈÄªËæëÂà§Êñ≠Á±ªÂûã
        if (tourData.tour_type) {
          console.log(`‰ΩøÁî®APIËøîÂõûÁöÑtourData.tour_type: ${tourData.tour_type}`);
          if (tourData.tour_type.includes('day')) {
            effectiveTourType = 'day';
          } else if (tourData.tour_type.includes('group')) {
            effectiveTourType = 'group';
          } else {
            effectiveTourType = 'day'; // ÈªòËÆ§ÂÄº
          }
        }
        // ÂÖ∂Ê¨°‰ΩøÁî®È°µÈù¢‰∏äÁöÑÁä∂ÊÄÅÂíåURL‰∏≠ÁöÑÁ±ªÂûã
        else {
          const urlTourType = type || tourType;
          
          console.log(`‰ΩøÁî®È°µÈù¢Áä∂ÊÄÅÁöÑÁ±ªÂûã: ${urlTourType}`);
          
          // ‰ªé‰∏çÂêåÊù•Ê∫êËé∑ÂèñtourTypeÔºåÁ°Æ‰øùÊúÄÁªàÂæóÂà∞Ê≠£Á°ÆÁöÑÂÄº
          if (typeof urlTourType === 'string') {
            if (urlTourType.includes('day') || urlTourType === 'day') {
              effectiveTourType = 'day';
            } else if (urlTourType.includes('group') || urlTourType === 'group') {
              effectiveTourType = 'group';
            } else if (window.location.pathname.includes('day-tours')) {
              effectiveTourType = 'day';
            } else if (window.location.pathname.includes('group-tours')) {
              effectiveTourType = 'group';
            } else {
              effectiveTourType = 'day'; // ÈªòËÆ§ÂÄº
            }
          } else {
            effectiveTourType = 'day'; // ÈªòËÆ§ÂÄº
          }
        }
        
        console.log(`ÊâßË°åÊäòÊâ£ËÆ°ÁÆó: ‰∫ßÂìÅID=${tourId}, Á±ªÂûã=${effectiveTourType}, Âéü‰ª∑=${originalPrice}`);
        
        // Â§öÊ¨°Â∞ùËØïË∞ÉÁî®API‰ª•Á°Æ‰øùËØ∑Ê±ÇÊàêÂäü
        let attempts = 0;
        let success = false;
        let discountResult = null;
        
        while (attempts < 3 && !success) {
          try {
            discountResult = await calculateTourDiscount({
              tourId: tourId,
              tourType: effectiveTourType,
              originalPrice: originalPrice,
              agentId: agentId
            });
            
            if (discountResult && !discountResult.error) {
              success = true;
            } else {
              console.warn(`Á¨¨${attempts + 1}Ê¨°ËÆ°ÁÆóÊäòÊâ£Â§±Ë¥•:`, discountResult);
              await new Promise(resolve => setTimeout(resolve, 500)); // Âª∂Ëøü500msÂÜçËØï
            }
          } catch (retryError) {
            console.error(`Á¨¨${attempts + 1}Ê¨°ËÆ°ÁÆóÊäòÊâ£Âá∫Èîô:`, retryError);
          }
          attempts++;
        }
        
        console.log('ÊäòÊâ£‰ª∑Ê†ºËÆ°ÁÆóÁªìÊûú:', discountResult);
        
        if (success && discountResult.discountedPrice !== undefined) {
          setDiscountedPrice(discountResult.discountedPrice);
          console.log(`ÂêéÁ´ØËÆ°ÁÆóÊäòÊâ£: Âéü‰ª∑=${originalPrice}, ÊäòÊâ£‰ª∑=${discountResult.discountedPrice}, ÊäòÊâ£Áéá=${discountResult.discountRate}`);
        } else {
          console.warn('Êó†Ê≥ïËé∑ÂèñÊúâÊïàÁöÑÊäòÊâ£‰ª∑Ê†ºÔºå‰ΩøÁî®Âéü‰ª∑');
          setDiscountedPrice(originalPrice);
        }
        
        setLoadingDiscount(false);
      } catch (error) {
        console.error('ËÆ°ÁÆóÊäòÊâ£‰ª∑Ê†ºÂ§±Ë¥•:', error);
        setDiscountedPrice(tourData.price);
        setLoadingDiscount(false);
      }
    } else {
      console.log('‰∏çÈúÄË¶ÅËÆ°ÁÆóÊäòÊâ£‰ª∑Ê†º:', { 
        tourDataExists: !!tourData, 
        isAgent, 
        agentIdExists: !!agentId, 
        loadingDiscount 
      });
    }
  };

  // ÂΩìÊóÖÊ∏∏ËØ¶ÊÉÖÂä†ËΩΩÂÆåÊàê‰∏îÁî®Êà∑ÊòØ‰ª£ÁêÜÂïÜÊó∂ÔºåËé∑ÂèñÊäòÊâ£‰ª∑Ê†º
  useEffect(() => {
    fetchDiscountPrice();
  }, [tourData, isAgent, agentId]);

  // Ê∏≤ÊüìÊòüÁ∫ßËØÑÂàÜ
  const renderRating = (rating) => {
    const ratingNum = parseFloat(rating);
    const fullStars = Math.floor(ratingNum);
    const hasHalfStar = ratingNum % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    return (
      <div className="d-flex align-items-center">
        {[...Array(fullStars)].map((_, i) => (
          <FaStar key={`full-${i}`} className="text-warning me-1" />
        ))}
        {hasHalfStar && <FaStarHalfAlt className="text-warning me-1" />}
        {[...Array(emptyStars)].map((_, i) => (
          <FaRegStar key={`empty-${i}`} className="text-warning me-1" />
        ))}
        <span className="ms-1 text-muted">{tourData?.reviews}</span>
      </div>
    );
  };

  

  // Â§ÑÁêÜ"Á´ãÂç≥È¢ÑËÆ¢"ÊåâÈíÆÁÇπÂáª
  const handleBookNow = () => {
    if (!tourData || !id) {
      setError('Êó†ÊïàÁöÑÊóÖÊ∏∏‰∫ßÂìÅ');
      return;
    }
    
    // ËÆ°ÁÆóÊÄª‰∫∫Êï∞
    const adultCount = selectedAdultCount || 1;
    const childCount = selectedChildCount || 0;
    const totalPeople = adultCount + childCount;
    const roomCount = selectedRoomCount || 1;
    
    console.log('È¢ÑËÆ¢‰ø°ÊÅØ:', {
      Êàê‰∫∫Êï∞: adultCount,
      ÂÑøÁ´•Êï∞: childCount,
      ÊàøÈó¥Êï∞: roomCount,
      ÈÄâÊã©ÁöÑÈÖíÂ∫ó: selectedHotelLevel
    });
    
    // Ê£ÄÊü•ÊòØÂê¶ÈÄâÊã©‰∫ÜÊó•ÊúüÔºàÂØπ‰∫éÈúÄË¶ÅÊó•ÊúüÁöÑ‰∫ßÂìÅÔºâ
    if (requiresDateSelection && !selectedDate) {
      setError('ËØ∑ÈÄâÊã©ÊóÖÊ∏∏Êó•Êúü');
      return;
    }
    
    // ÊûÑÂª∫URLÂèÇÊï∞
    const params = new URLSearchParams();
    params.append('tourId', id);
    params.append('tourName', tourData.title || tourData.name || '');
    params.append('type', type);
    params.append('adultCount', adultCount);
    params.append('childCount', childCount);
    params.append('roomCount', roomCount); // Á°Æ‰øùÊ∑ªÂä†roomCountÂèÇÊï∞
    
    // Ê†πÊçÆÊóÖÊ∏∏Á±ªÂûãÊ∑ªÂä†‰∏çÂêåÁöÑÊó•ÊúüÂèÇÊï∞
    if (tourType === 'group_tour' || type === 'group') {
      // Ë∑üÂõ¢Ê∏∏ÔºöÊ∑ªÂä†arrivalDateÂíådepartureDate
      if (startDate) {
        params.append('arrivalDate', startDate.toISOString().split('T')[0]);
      }
      
      if (endDate) {
        params.append('departureDate', endDate.toISOString().split('T')[0]);
      }
    } else {
      // Êó•Ê∏∏ÔºöÂè™Ê∑ªÂä†Êó•ÊúüÂèÇÊï∞
      if (selectedDate) {
        params.append('date', selectedDate.toISOString().split('T')[0]);
      }
    }
    
    if (selectedHotelLevel) {
      params.append('hotelLevel', selectedHotelLevel);
    }
    
    // Â¶ÇÊûúÊúâËÆ°ÁÆóÁöÑ‰ª∑Ê†ºÔºåÊ∑ªÂä†Âà∞URL
                // ‰ΩøÁî®‰∫ßÂìÅ‰ª∑Ê†ºÔºàÊ†πÊçÆÁî®Êà∑ËßíËâ≤Á°ÆÂÆöÔºâ
            let priceToUse = tourData?.price || 0;
            if (user?.role === 'agent' && tourData?.discountedPrice) {
              priceToUse = tourData.discountedPrice;
            }
            if (priceToUse) {
              params.append('price', priceToUse);
    }
    
    // Ê∑ªÂä†ÂÑøÁ´•Âπ¥ÈæÑÂèÇÊï∞
    if (childCount > 0 && childrenAges.length > 0) {
      params.append('childrenAges', childrenAges.join(','));
    }

    console.log('ÂØºËà™Âà∞È¢ÑËÆ¢È°µÈù¢ÔºåÂèÇÊï∞:', params.toString());
    console.log('‰º†ÈÄíÁöÑstateÊï∞ÊçÆ:', {
      tourId: id,
      tourType: type,
      adultCount: adultCount,
      childCount: childCount,
      roomCount: roomCount, // Á°Æ‰øùÂú®state‰∏≠‰º†ÈÄíroomCount
      hotelLevel: selectedHotelLevel,
      childrenAges: childrenAges,
      tourDate: selectedDate ? selectedDate.toISOString().split('T')[0] : 
              (startDate ? startDate.toISOString().split('T')[0] : null)
    });
    
    // Ê†πÊçÆÁî®Êà∑Á±ªÂûãÂÜ≥ÂÆöË∑≥ËΩ¨Âà∞Âì™‰∏™È°µÈù¢
    const bookingPath = isAgent ? 
      `/agent-booking/${type === 'group' ? 'group-tours' : 'day-tours'}/${id}?${params.toString()}` :
      `/booking?${params.toString()}`;
    
    console.log('Ë∑≥ËΩ¨Ë∑ØÂæÑ:', bookingPath, 'Áî®Êà∑Á±ªÂûã:', { isAgent, userType });
    
    // ÂØºËà™Âà∞È¢ÑËÆ¢È°µÈù¢ÔºåÈÄöËøástate‰º†ÈÄíÊõ¥Â§öËØ¶ÁªÜÊï∞ÊçÆ
    navigate(bookingPath, {
      state: {
        tourId: id,
        tourType: type,
        adultCount: adultCount,
        childCount: childCount,
        roomCount: roomCount, // Á°Æ‰øùÂú®state‰∏≠‰º†ÈÄíroomCount
        childrenAges: childrenAges, // Ê∑ªÂä†ÂÑøÁ´•Âπ¥ÈæÑÊï∞ÁªÑ
        tourDate: selectedDate ? selectedDate.toISOString().split('T')[0] : 
                (startDate ? startDate.toISOString().split('T')[0] : null),
        bookingOptions: {
          hotelLevel: selectedHotelLevel,
          // Ê∑ªÂä†ÂÖ∂‰ªñÂèØËÉΩÁöÑÈÄâÈ°π
                totalPrice: (user?.role === 'agent' && tourData?.discountedPrice) ? tourData.discountedPrice : tourData?.price || 0,
      hotelPriceDifference: 0, // ‰∏çÂÜçÂä®ÊÄÅËÆ°ÁÆóÈÖíÂ∫óÂ∑Æ‰ª∑
      dailySingleRoomSupplement: 0 // ‰∏çÂÜçÂä®ÊÄÅËÆ°ÁÆóÂçïÊàøÂ∑Æ
        },
        tourData: {
          title: tourData.title || tourData.name,
          imageUrl: tourData.imageUrl || tourData.coverImage,
          duration: tourData.duration,
          hotelNights: tourData.hotelNights || (tourData.duration ? tourData.duration - 1 : 0),
          highlights: tourData.highlights ? tourData.highlights.slice(0, 3) : []
        }
      }
    });
  };

  // Âú®‰∫ßÂìÅËØ¶ÊÉÖÈ°µÈù¢Ê∑ªÂä†Êó•ÊúüÈÄâÊã©Âô®
  const renderDateSelectors = () => {
    // È™åËØÅÊó•ÊúüÊúâÊïàÊÄßÁöÑËæÖÂä©ÂáΩÊï∞
    const isValidDate = (date) => {
      return date && date instanceof Date && !isNaN(date.getTime()) && date.getTime() > 0;
    };

    // ‰∏∫DatePickerÊèê‰æõÂÆâÂÖ®ÁöÑÊó•ÊúüÂÄº
    const safeStartDate = isValidDate(startDate) ? startDate : null;
    const safeEndDate = isValidDate(endDate) ? endDate : null;
    const safeSelectedDate = isValidDate(selectedDate) ? selectedDate : null;

    return (
      <Card className="mb-4">
        <Card.Header>
          <h3 className="h5 mb-0">ÈÄâÊã©Ë°åÁ®ãÊó•Êúü</h3>
        </Card.Header>
        <Card.Body>
          <Row>
            {tourType === 'group_tour' || type === 'group' ? (
              // Âõ¢‰ΩìÊ∏∏ÊòæÁ§∫Ëµ∑ÂßãÂíåÁªìÊùüÊó•Êúü
              <>
                <Col md={6} className="mb-3">
                  <Form.Group>
                    <Form.Label><FaCalendarAlt className="me-2" />Âà∞ËææÊó•Êúü</Form.Label>
                    <DatePicker
                      selected={safeStartDate}
                      onChange={date => setStartDate(date)}
                      selectsStart
                      startDate={safeStartDate}
                      endDate={safeEndDate}
                      minDate={new Date()}
                      className="form-control"
                      dateFormat="yyyyÂπ¥MMÊúàddÊó•"
                      calendarClassName="date-picker-calendar"
                      wrapperClassName="date-picker-wrapper"
                      showPopperArrow={false}
                      portalId="date-picker-portal"
                    />
                  </Form.Group>
                </Col>
                <Col md={6} className="mb-3">
                  <Form.Group>
                    <Form.Label><FaCalendarAlt className="me-2" />Á¶ªÂºÄÊó•Êúü</Form.Label>
                    <DatePicker
                      selected={safeEndDate}
                      onChange={date => setEndDate(date)}
                      selectsEnd
                      startDate={safeStartDate}
                      endDate={safeEndDate}
                      minDate={safeStartDate || new Date()}
                      className="form-control"
                      dateFormat="yyyyÂπ¥MMÊúàddÊó•"
                      calendarClassName="date-picker-calendar"
                      wrapperClassName="date-picker-wrapper"
                      showPopperArrow={false}
                      portalId="date-picker-portal"
                    />
                  </Form.Group>
                </Col>
              </>
            ) : (
              // ‰∏ÄÊó•Ê∏∏Âè™ÊòæÁ§∫Âçï‰∏™Êó•Êúü
              <Col md={12} className="mb-3">
                <Form.Group>
                  <Form.Label><FaCalendarAlt className="me-2" />ÊóÖÊ∏∏Êó•Êúü</Form.Label>
                  <DatePicker
                    selected={safeSelectedDate}
                    onChange={handleDateChange}
                    minDate={new Date()}
                    className="form-control"
                    dateFormat="yyyyÂπ¥MMÊúàddÊó•"
                    calendarClassName="date-picker-calendar"
                    wrapperClassName="date-picker-wrapper"
                    showPopperArrow={false}
                    portalId="date-picker-portal"
                  />
                  <Form.Text className="text-muted">
                    ËØ∑ÈÄâÊã©ÊÇ®ËÆ°ÂàíÁöÑÊóÖÊ∏∏Êó•Êúü
                  </Form.Text>
                </Form.Group>
              </Col>
            )}
          </Row>
        </Card.Body>
      </Card>
    );
  };

  // Ê∏≤Êüì‰∏ªË¶ÅÂÜÖÂÆπ
  const renderContent = () => {
    if (loading) {
      return (
        <Container className="py-5 text-center">
          <Spinner animation="border" variant="primary" />
          <p className="mt-3">Ê≠£Âú®Âä†ËΩΩÊóÖÊ∏∏ËØ¶ÊÉÖ...</p>
        </Container>
      );
    }

    if (error) {
      return (
        <Container className="py-5">
          <Alert variant="danger">
            <Alert.Heading>Âä†ËΩΩÂ§±Ë¥•</Alert.Heading>
            <p>{error}</p>
            <hr />
            <div className="d-flex justify-content-between">
              <Button onClick={() => navigate(-1)} variant="outline-danger">ËøîÂõû‰∏ä‰∏ÄÈ°µ</Button>
              <Button onClick={() => window.location.reload()} variant="outline-primary">ÈáçÊñ∞Âä†ËΩΩ</Button>
            </div>
          </Alert>
        </Container>
      );
    }

    if (!tourData) {
      return (
        <Container className="py-5">
          <Alert variant="warning">
            <Alert.Heading>Êú™ÊâæÂà∞ÊóÖÊ∏∏‰ø°ÊÅØ</Alert.Heading>
            <p>Êú™ËÉΩÊâæÂà∞Áõ∏ÂÖ≥ÊóÖÊ∏∏‰∫ßÂìÅÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ</p>
            <Button onClick={() => navigate('/tours')} variant="outline-primary">ËøîÂõûÊóÖÊ∏∏ÂàóË°®</Button>
          </Alert>
        </Container>
      );
    }

    return (
      <div className="tour-details-page">
        {/* Google SEO‰ºòÂåñÁöÑÂä®ÊÄÅmetaÊ†áÁ≠æ */}
        <Helmet>
          <title>{`${tourData?.title || tourData?.name || '‰∫ßÂìÅËØ¶ÊÉÖ'} - HTAS Â°îÊñØÈ©¨Â∞º‰∫öÂçé‰∫∫ÊóÖÊ∏∏`}</title>
          <meta name="description" content={`${tourData?.description || tourData?.intro || 'Êé¢Á¥¢Â°îÊñØÈ©¨Â∞º‰∫öÁöÑÁªùÁæéÈ£éÂÖâ'} - HTASÊèê‰æõ‰∏ì‰∏ö‰∏≠ÊñáÂØºÊ∏∏ÊúçÂä°ÔºåËÆ©ÊÇ®Ê∑±Â∫¶‰ΩìÈ™åÂ°îÂ∑û‰πãÁæé„ÄÇÂú®Á∫øÈ¢ÑËÆ¢Ôºå‰ºòË¥®ÊúçÂä°‰øùÈöú„ÄÇ`} />
          
          {/* Keywords */}
          <meta name="keywords" content={`Â°îÊñØÈ©¨Â∞º‰∫öÊóÖÊ∏∏,${tourData?.title || tourData?.name},HTAS,Â°îÂ∑û‰∏ÄÊó•Ê∏∏,‰∏≠ÊñáÂØºÊ∏∏,${highlights.slice(0, 3).join(',')}`} />
          
          {/* Open Graph */}
          <meta property="og:title" content={`${tourData?.title || tourData?.name} - HTASÂ°îÊñØÈ©¨Â∞º‰∫öÂçé‰∫∫ÊóÖÊ∏∏`} />
          <meta property="og:description" content={tourData?.description || tourData?.intro || 'Êé¢Á¥¢Â°îÊñØÈ©¨Â∞º‰∫öÁöÑÁªùÁæéÈ£éÂÖâ'} />
          <meta property="og:image" content={images.length > 0 ? images[0].original : tourData?.coverImage} />
          <meta property="og:url" content={`https://www.htas.com.au/tours/${id}?type=${type}`} />
          <meta property="og:type" content="product" />
          <meta property="og:site_name" content="HTAS - Â°îÊñØÈ©¨Â∞º‰∫öÂçé‰∫∫ÊóÖÊ∏∏" />
          
          {/* Twitter Card */}
          <meta name="twitter:card" content="summary_large_image" />
          <meta name="twitter:title" content={`${tourData?.title || tourData?.name} - HTAS`} />
          <meta name="twitter:description" content={tourData?.description || tourData?.intro || 'Êé¢Á¥¢Â°îÊñØÈ©¨Â∞º‰∫öÁöÑÁªùÁæéÈ£éÂÖâ'} />
          <meta name="twitter:image" content={images.length > 0 ? images[0].original : tourData?.coverImage} />
          
          {/* ‰∫ßÂìÅÁªìÊûÑÂåñÊï∞ÊçÆ */}
          <script type="application/ld+json">
            {JSON.stringify(generateStructuredData())}
          </script>
          
          {/* FAQÁªìÊûÑÂåñÊï∞ÊçÆ */}
          {faqs && faqs.length > 0 && (
            <script type="application/ld+json">
              {JSON.stringify(generateFAQStructuredData())}
            </script>
          )}
          
          {/* Èù¢ÂåÖÂ±ëÂØºËà™ÁªìÊûÑÂåñÊï∞ÊçÆ */}
          <script type="application/ld+json">
            {JSON.stringify({
              "@context": "https://schema.org",
              "@type": "BreadcrumbList",
              "itemListElement": [
                {
                  "@type": "ListItem",
                  "position": 1,
                  "name": "È¶ñÈ°µ",
                  "item": "https://www.htas.com.au"
                },
                {
                  "@type": "ListItem",
                  "position": 2,
                  "name": "ÊóÖÊ∏∏‰∫ßÂìÅ",
                  "item": "https://www.htas.com.au/tours"
                },
                {
                  "@type": "ListItem",
                  "position": 3,
                  "name": tourData?.title || tourData?.name,
                  "item": `https://www.htas.com.au/tours/${id}?type=${type}`
                }
              ]
            })}
          </script>
          
          {/* Êú¨Âú∞ÂïÜÂÆ∂‰ø°ÊÅØ */}
          <script type="application/ld+json">
            {JSON.stringify({
              "@context": "https://schema.org",
              "@type": "LocalBusiness",
              "@id": "https://www.htas.com.au/#organization",
              "name": "HTAS - Â°îÊñØÈ©¨Â∞º‰∫öÂçé‰∫∫ÊóÖÊ∏∏",
              "image": "https://www.htas.com.au/logo.png",
              "description": "‰∏ì‰∏öÁöÑÂ°îÊñØÈ©¨Â∞º‰∫ö‰∏≠ÊñáÊóÖÊ∏∏ÊúçÂä°ÔºåÊèê‰æõ‰∏ÄÊó•Ê∏∏„ÄÅË∑üÂõ¢Ê∏∏Á≠âÂ§öÁßçÊóÖÊ∏∏‰∫ßÂìÅ",
              "url": "https://www.htas.com.au",
              "telephone": "+61-3-6234-5678",
              "address": {
                "@type": "PostalAddress",
                "streetAddress": "",
                "addressLocality": "Hobart",
                "addressRegion": "Tasmania",
                "postalCode": "7000",
                "addressCountry": "AU"
              },
              "geo": {
                "@type": "GeoCoordinates",
                "latitude": -42.8821,
                "longitude": 147.3272
              },
              "areaServed": {
                "@type": "State",
                "name": "Tasmania"
              },
              "serviceType": "Travel Agency"
            })}
          </script>
        </Helmet>

        {/* ÁôæÂ∫¶SEO‰ºòÂåñ */}
        <BaiduSEO 
          tourData={tourData}
          tourType={tourType}
          pageType="product"
        />

        {/* Èù¢ÂåÖÂ±ëÂØºËà™ */}
        <Container>
          <div className="breadcrumbs mb-3">
            <Link to="/">È¶ñÈ°µ</Link> / 
            {tourType === 'day_tour' ? (
              <Link to="/tours?tourTypes=day_tour">‰∏ÄÊó•Ê∏∏</Link>
            ) : (
              <Link to="/tours?tourTypes=group_tour">Ë∑üÂõ¢Ê∏∏</Link>
            )} / 
            <span>{tourData?.title || tourData?.name}</span>
          </div>
        </Container>

        {/* Êñ∞ÁöÑÂ§¥ÈÉ®ËÆæËÆ° */}
        <Container className="mb-5">
          <div className="modern-tour-header">
            {/* Ê†áÈ¢òÂíåÂü∫Êú¨‰ø°ÊÅØ */}
            <div className="tour-header-info mb-4 d-flex justify-content-between">
              <h1 className="modern-tour-title">{tourData?.title || tourData?.name}</h1>
              
              

              {/* ‰ª∑Ê†ºÂíåÊìç‰ΩúÊåâÈíÆË°å */}
              <div className="tour-price-action-row">
                <div className="tour-price-section">
                  <span className="price-label">Ëµ∑‰ª∑</span>
                  <div className="price-display">
                    {isAgent && discountedPrice ? (
                      <>
                        <span className="original-price">¬•{tourData?.price || 0}</span>
                        <span className="discount-price">¬•{discountedPrice}</span>
                      </>
                    ) : (
                      <span className="current-price">¬•{tourData?.price || 0}</span>
                    )}
                  </div>
                </div>
                
                
              </div>
            </div>

            {/* ÂõæÁâáÂ±ïÁ§∫Âå∫Âüü */}
            <div className="modern-gallery-grid">
              <div className="main-image-container">
                {images && images.length > 0 && images[0] ? (
                  <img 
                    src={proxyImageUrl(images[0].original)} 
                    alt={images[0].description || `${tourData?.title || tourData?.name} ‰∏ªÂõæ`}
                    className="main-gallery-image"
                    onError={(e) => {
                      console.error('‰∏ªÂõæÂä†ËΩΩÂ§±Ë¥•:', images[0].original);
                      e.target.style.display = 'none';
                    }}
                    onLoad={() => {
                      console.log('‰∏ªÂõæÂä†ËΩΩÊàêÂäü:', images[0].original);
                    }}
                  />
                ) : (
                  <div className="placeholder-image">
                    <FaMapMarkerAlt size={60} className="text-muted" />
                    <p className="mt-2 text-muted">
                      {loading ? 'Âä†ËΩΩ‰∏≠...' : `ÊöÇÊó†ÂõæÁâá (ÂÖ±${images?.length || 0}Âº†)`}
                    </p>
                  </div>
                )}
              </div>
              
              <div className="thumbnail-grid">
                {images && images.length > 1 ? 
                  images.slice(1, 5).map((image, index) => (
                    <div key={index} className="thumbnail-container">
                      <img 
                        src={proxyImageUrl(image.thumbnail)} 
                        alt={image.description || `${tourData?.title || tourData?.name} ÂõæÁâá ${index + 2}`}
                        className="thumbnail-image"
                        onError={(e) => {
                          console.error(`Áº©Áï•Âõæ${index + 2}Âä†ËΩΩÂ§±Ë¥•:`, image.thumbnail);
                          e.target.style.display = 'none';
                        }}
                        onLoad={() => {
                          console.log(`Áº©Áï•Âõæ${index + 2}Âä†ËΩΩÊàêÂäü:`, image.thumbnail);
                        }}
                      />
                      {index === 3 && images.length > 5 && (
                        <div className="more-images-overlay">
                          <span>Êü•ÁúãÂÖ®ÈÉ® {images.length} Âº†ÂõæÁâá</span>
                        </div>
                      )}
                    </div>
                  )) : (
                    // ÊòæÁ§∫Âç†‰ΩçÁº©Áï•Âõæ
                    [...Array(4)].map((_, index) => (
                      <div key={index} className="thumbnail-container">
                        <div className="placeholder-thumbnail">
                          <FaMapMarkerAlt size={20} className="text-muted" />
                        </div>
                      </div>
                    ))
                  )
                }
              </div>
            </div>
          </div>
        </Container>

        {/* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */}
        <Container className="main-content mb-5">
          <Row>
            <Col lg={8}>
              <Tab.Container id="tour-tabs" defaultActiveKey="overview">
                <div className="tour-tabs-wrapper">
                  <Nav variant="tabs" className="tour-tabs mb-4">
                    <Nav.Item>
                      <Nav.Link eventKey="overview" onClick={() => setActiveTab('overview')}>Ë°åÁ®ãÊ¶ÇÂÜµ</Nav.Link>
                    </Nav.Item>
                    <Nav.Item>
                      <Nav.Link eventKey="itinerary" onClick={() => setActiveTab('itinerary')}>Ë°åÁ®ãÂÆâÊéí</Nav.Link>
                    </Nav.Item>
                    <Nav.Item>
                      <Nav.Link eventKey="fees" onClick={() => setActiveTab('fees')}>Ë¥πÁî®ËØ¥Êòé</Nav.Link>
                    </Nav.Item>
                    <Nav.Item>
                      <Nav.Link eventKey="location" onClick={() => setActiveTab('location')}>Âú∞Âõæ‰ΩçÁΩÆ</Nav.Link>
                    </Nav.Item>
                    <Nav.Item>
                      <Nav.Link eventKey="faq" onClick={() => setActiveTab('faq')}>Â∏∏ËßÅÈóÆÈ¢ò</Nav.Link>
                    </Nav.Item>
                    <Nav.Item>
                      <Nav.Link eventKey="reviews" onClick={() => setActiveTab('reviews')}>ÂÆ¢Êà∑ËØÑ‰ª∑</Nav.Link>
                    </Nav.Item>
                  </Nav>

                  <Tab.Content>
                    <Tab.Pane eventKey="overview">
                                            {/* ‰∫ßÂìÅÂ±ïÁ§∫ÂõæÁâá */}
                      {(tourData?.productShowcaseImage || tourData?.product_showcase_image) && (
                        <div className="product-showcase-in-tab mb-4">
                          <div className="product-showcase-image-wrapper">
                            <img 
                              src={proxyImageUrl(tourData.productShowcaseImage || tourData.product_showcase_image)} 
                              alt={`${tourData?.title || tourData?.name} ‰∫ßÂìÅÂ±ïÁ§∫`}
                              className="product-showcase-img"
                            />
                            <div className="product-showcase-overlay">
                              <div className="showcase-badge">
                                <FaInfoCircle className="me-1" />
                                Á≤æÈÄâÂ±ïÁ§∫
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      <div className="tour-description mb-4">
                        <h3 className="section-title">Ë°åÁ®ã‰ªãÁªç</h3>
                        <p>{tourData?.description || tourData?.intro || tourData?.des}</p>
                      </div>

                      <div className="tour-highlights mb-4">
                        <h3 className="section-title">Ë°åÁ®ã‰∫ÆÁÇπ</h3>
                        {highlights && highlights.length > 0 ? (
                          <ul className="highlights-list">
                            {highlights.map((highlight, index) => (
                              <li key={index}>{highlight}</li>
                            ))}
                          </ul>
                        ) : (
                          <Alert variant="info">ÊöÇÊó†‰∫ÆÁÇπ‰ø°ÊÅØÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ</Alert>
                        )}
                      </div>

                      <div className="mb-4">
                        <h3 className="section-title">ÊóÖË°åË¥¥Â£´</h3>
                        <Card>
                          <Card.Body>
                            {tips && tips.length > 0 ? (
                              <ul className="tips-list">
                                {tips.map((tip, index) => (
                                  <li key={index} className="d-flex">
                                    <FaLightbulb className="text-warning mt-1 me-2" />
                                    <span>{tip}</span>
                                  </li>
                                ))}
                              </ul>
                            ) : (
                              <Alert variant="info">ÊöÇÊó†ÊóÖË°åË¥¥Â£´ÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ</Alert>
                            )}
                          </Card.Body>
                        </Card>
                      </div>
                    </Tab.Pane>

                    <Tab.Pane eventKey="itinerary">
                      <h3 className="section-title">ËØ¶ÁªÜË°åÁ®ã</h3>
                      {itinerary && itinerary.length > 0 ? (
                        <>
                          {tourType === 'day_tour' ? (
                            // ‰∏ÄÊó•Ê∏∏Ë°åÁ®ãÂ±ïÁ§∫ÔºàÊåâÊó∂Èó¥ÊÆµÔºâ
                            <div className="day-tour-itinerary">
                              <h4 className="mb-3">Ë°åÁ®ãÂÆâÊéí</h4>
                              <div className="timeline">
                                {itinerary.map((item, index) => (
                                  <div className="timeline-item" key={index}>
                                    <div className="timeline-badge">
                                      <FaClock className="text-white" />
                                    </div>
                                    <div className="timeline-panel">
                                      <div className="timeline-heading">
                                        <h5 className="timeline-title">
                                          <span className="time">{item.time_slot}</span> - {item.activity}
                                        </h5>
                                        {item.location && (
                                          <p className="timeline-location">
                                            <FaMapMarkerAlt className="me-1 text-danger" />
                                            {item.location}
                                          </p>
                                        )}
                                      </div>
                                      {item.description && (
                                        <div className="timeline-body mt-2">
                                          <p>{item.description}</p>
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          ) : (
                            // Ë∑üÂõ¢Ê∏∏Ë°åÁ®ãÂ±ïÁ§∫ÔºàÊåâÂ§©Ôºâ
                            <Accordion defaultActiveKey="0" className="itinerary-accordion">
                              {itinerary.map((day, index) => (
                                <Accordion.Item eventKey={index.toString()} key={index}>
                                  <Accordion.Header>
                                    {day.title ? (
                                      <span dangerouslySetInnerHTML={{ __html: day.title }} />
                                    ) : (
                                      <span>Á¨¨{day.day_number || (index + 1)}Â§©</span>
                                    )}
                                  </Accordion.Header>
                                  <Accordion.Body>
                                    <div className="day-details">
                                      {day.des && <p className="day-description">{day.des}</p>}
                                      {day.description && <p className="day-description">{day.description}</p>}
                                      
                                      {day.image && (
                                        <div className="day-image mb-3">
                                          <img src={day.image} alt={`Á¨¨${day.day_number || (index + 1)}Â§©ÊôØÁÇπ`} className="img-fluid rounded" />
                                        </div>
                                      )}
                                      
                                      {day.meals && (
                                        <div className="day-meals mb-2">
                                          <strong className="me-2">È§êÈ£ü:</strong>
                                          <span>{day.meals}</span>
                                        </div>
                                      )}
                                      
                                      {day.accommodation && (
                                        <div className="day-accommodation mb-2">
                                          <strong className="me-2">‰ΩèÂÆø:</strong>
                                          <span>{day.accommodation}</span>
                                        </div>
                                      )}
                                      
                                      {day.activities && day.activities.length > 0 && (
                                        <div className="day-activities">
                                          <strong className="me-2">Ê¥ªÂä®:</strong>
                                          <div className="d-flex flex-wrap">
                                            {day.activities.map((activity, i) => (
                                              <Badge
                                                key={i}
                                                bg="light"
                                                text="dark"
                                                className="me-2 mb-2 p-2"
                                              >
                                                {activity}
                                              </Badge>
                                            ))}
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  </Accordion.Body>
                                </Accordion.Item>
                              ))}
                            </Accordion>
                          )}
                        </>
                      ) : (
                        <Alert variant="info">ÊöÇÊó†ËØ¶ÁªÜË°åÁ®ã‰ø°ÊÅØÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ</Alert>
                      )}
                    </Tab.Pane>

                    <Tab.Pane eventKey="fees">
                      <div className="fees-section">
                        <div className="included-fees mb-4">
                          <h3 className="section-title">Ë¥πÁî®ÂåÖÂê´</h3>
                          {inclusions && inclusions.length > 0 ? (
                            <ul className="included-list">
                              {inclusions.map((item, index) => (
                                <li key={index} className="d-flex">
                                  <FaCheck style={{ color: themeColor }} className="mt-1 me-2" />
                                  <span>{item}</span>
                                </li>
                              ))}
                            </ul>
                          ) : (
                            <Alert variant="info">ÊöÇÊó†Ë¥πÁî®ÂåÖÂê´‰ø°ÊÅØÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ</Alert>
                          )}
                        </div>
                        
                        <div className="excluded-fees mb-4">
                          <h3 className="section-title">Ë¥πÁî®‰∏çÂåÖÂê´</h3>
                          {exclusions && exclusions.length > 0 ? (
                            <ul className="excluded-list">
                              {exclusions.map((item, index) => (
                                <li key={index} className="d-flex">
                                  <FaTimes className="text-danger mt-1 me-2" />
                                  <span>{item}</span>
                                </li>
                              ))}
                            </ul>
                          ) : (
                            <Alert variant="info">ÊöÇÊó†Ë¥πÁî®‰∏çÂåÖÂê´‰ø°ÊÅØÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ</Alert>
                          )}
                        </div>
                      </div>
                    </Tab.Pane>

                    <Tab.Pane eventKey="location">
                      <h3 className="section-title">Âú∞Âõæ‰ΩçÁΩÆ</h3>
                      <div className="map-container">
                        {tourData?.mapLocation ? (
                          <iframe
                            src={tourData.mapLocation}
                            width="100%"
                            height="450"
                            style={{ border: 0 }}
                            allowFullScreen=""
                            loading="lazy"
                            referrerPolicy="no-referrer-when-downgrade"
                            title="Âú∞Âõæ‰ΩçÁΩÆ"
                          ></iframe>
                        ) : (
                          <Alert variant="info">ÊöÇÊó†Âú∞Âõæ‰ø°ÊÅØ</Alert>
                        )}
                      </div>
                    </Tab.Pane>

                    <Tab.Pane eventKey="faq">
                      <h3 className="section-title">Â∏∏ËßÅÈóÆÈ¢ò</h3>
                      {faqs && faqs.length > 0 ? (
                        <Accordion className="faq-accordion">
                          {faqs.map((faq, index) => (
                            <Accordion.Item eventKey={index.toString()} key={index}>
                              <Accordion.Header>
                                <div className="d-flex align-items-center">
                                  <FaQuestionCircle className="text-primary me-2" />
                                  <span>{faq.question}</span>
                                </div>
                              </Accordion.Header>
                              <Accordion.Body>
                                <p>{faq.answer}</p>
                              </Accordion.Body>
                            </Accordion.Item>
                          ))}
                        </Accordion>
                      ) : (
                        <Alert variant="info">ÊöÇÊó†Â∏∏ËßÅÈóÆÈ¢ò‰ø°ÊÅØÔºåËØ∑ËÅîÁ≥ªÂÆ¢Êúç‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ</Alert>
                      )}
                    </Tab.Pane>

                    <Tab.Pane eventKey="reviews">
                      <h3 className="section-title">ÂÆ¢Êà∑ËØÑ‰ª∑</h3>
                      <CustomerReviews 
                        tourId={id}
                        tourType={tourType}
                        reviews={reviews}
                        loading={loading}
                      />
                    </Tab.Pane>
                  </Tab.Content>
                </div>
              </Tab.Container>
            </Col>
            
            <Col lg={4}>
              <div className="tour-sidebar">
                {/* ÁÆÄÂåñÁöÑÈ¢ÑËÆ¢Âç°Áâá */}
                <div className="modern-booking-card">
                  <div className="booking-card-header">
                    <h3 className="booking-title">‰ª∑Ê†º‰ø°ÊÅØ</h3>
                  </div>
                  
                  <div className="booking-card-body">
                    {/* ‰ª∑Ê†ºÊòæÁ§∫ */}
                    <div className="price-section">
                      {loadingDiscount || isPriceLoading ? (
                        <div className="price-loading">
                          <Spinner animation="border" size="sm" />
                          <span>ËÆ°ÁÆó‰ª∑Ê†º‰∏≠...</span>
                        </div>
                      ) : (
                        <div className="price-display">
                          {(() => {
                            // Ê†πÊçÆÁî®Êà∑ËßíËâ≤ÂÜ≥ÂÆöÊòæÁ§∫ÁöÑ‰ª∑Ê†º
                            let displayPrice = tourData?.price || 0;
                            let originalPrice = tourData?.price || 0;
                            let showDiscount = false;
                            
                            // ‰∏≠‰ªã‰∏ªÂè∑ÔºöÊòæÁ§∫ÊäòÊâ£‰ª∑
                            if (user?.role === 'agent' && tourData?.discountedPrice) {
                              displayPrice = tourData.discountedPrice;
                              showDiscount = true;
                            }
                            // ‰∏≠‰ªãÊìç‰ΩúÂè∑ÔºöÊòæÁ§∫ÊôÆÈÄöÁî®Êà∑‰ª∑Ê†º
                            else if (user?.role === 'agent_operator') {
                              displayPrice = tourData?.price || 0;
                              showDiscount = false;
                            }
                            
                            return (
                          <PriceDisplay
                                originalPrice={showDiscount ? originalPrice : null}
                                discountedPrice={displayPrice}
                                showBadge={showDiscount}
                            size="large"
                            isAgent={isAgent}
                          />
                            );
                          })()}
                          
                          {/* ‰ª∑Ê†ºËØ¥Êòé */}
                          <div className="price-note">
                            <small className="text-muted">
                              {user?.role === 'agent' && '‰ª£ÁêÜÂïÜ‰∏ì‰∫´‰ª∑Ê†ºÔºå'}
                              {user?.role === 'agent_operator' && 'ÊôÆÈÄöÁî®Êà∑‰ª∑Ê†ºÔºå'}
                              Âçï‰∫∫Ëµ∑‰ª∑ÔºåÊúÄÁªà‰ª∑Ê†º‰ª•È¢ÑËÆ¢È°µÈù¢‰∏∫ÂáÜ
                            </small>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* È¢ÑËÆ¢ÊåâÈíÆ */}
                    <div className="booking-actions">
                      {isAuthenticated ? (
                        <Button 
                          className="book-now-btn"
                          size="lg" 
                          onClick={() => {
                            // ÁÆÄÂåñÁöÑÈ¢ÑËÆ¢Ë∑≥ËΩ¨Ôºå‰ΩøÁî®ÈªòËÆ§ÂèÇÊï∞
                            const params = new URLSearchParams();
                            params.append('tourId', id);
                            params.append('tourName', tourData.title || tourData.name || '');
                            params.append('type', type);
                            params.append('adultCount', 1); // ÈªòËÆ§1‰∫∫
                            params.append('childCount', 0); // ÈªòËÆ§0ÂÑøÁ´•
                            params.append('roomCount', 1); // ÈªòËÆ§1Èó¥Êàø
                            
                            if (tourData.price) {
                              params.append('price', tourData.price);
                            }
                            
                            navigate(`/booking?${params.toString()}`);
                          }}
                        >
                          Á´ãÂç≥È¢ÑËÆ¢
                        </Button>
                      ) : (
                        <Button 
                          className="book-now-btn"
                          size="lg" 
                          onClick={() => {
                            // Êú™ÁôªÂΩïÁî®Êà∑Ë∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µ
                            const loginState = {
                              from: `/tours/${type}/${id}`,
                              message: "ËØ∑ÂÖàÁôªÂΩïÂêéÂÜçËøõË°åÈ¢ÑËÆ¢"
                            };
                            navigate('/login', { state: loginState });
                          }}
                        >
                          Á´ãÂç≥È¢ÑËÆ¢
                        </Button>
                      )}
                      
                      
                    </div>
                  </div>
                </div>

                {/* Â∏ÆÂä©Âç°Áâá */}
                <div className="help-card">
                  <div className="help-card-header">
                    <h5>ÈúÄË¶ÅÂ∏ÆÂä©?</h5>
                  </div>
                  <div className="help-card-body">
                    <div className="contact-info">
                      <div className="phone-contact">
                        <FaPhoneAlt className="contact-icon" />
                        <div>
                          <div className="phone-number">400-123-4567</div>
                          <small>Âë®‰∏ÄËá≥Âë®Êó• 9:00-18:00</small>
                        </div>
                      </div>
                    </div>
                    <div className="help-actions">
                      <Button variant="outline-primary" size="sm">Âú®Á∫øÂí®ËØ¢</Button>
                      <Button variant="outline-primary" size="sm">ÈÇÆ‰ª∂Âí®ËØ¢</Button>
                    </div>
                  </div>
                </div>
              </div>
            </Col>
          </Row>
        </Container>
      </div>
    );
  };

  // Ê∏≤ÊüìËΩÆÊí≠ÂõæÁªÑ‰ª∂
  const renderImageGallery = () => {
    // Â¶ÇÊûúÊ≤°ÊúâÂõæÁâáÊï∞ÊçÆÔºåÂàô‰∏çÊòæÁ§∫ËΩÆÊí≠Âõæ
    if (!images || images.length === 0) {
      return (
        <div className="text-center py-4">
          <p className="text-muted">ÊöÇÊó†ÂõæÁâá</p>
        </div>
      );
    }

    return (
      <div className="custom-gallery-wrapper">
        <ImageGallery
          items={images}
          showPlayButton={false}
          showFullscreenButton={false}
          showThumbnails={true}
          showNav={true}
          showBullets={false}
          showIndex={false}
          lazyLoad={true}
          thumbnailPosition="bottom"
          slideDuration={300}
          slideInterval={5000}
          startIndex={0}
          additionalClass="tour-image-gallery modern-gallery"
          useBrowserFullscreen={false}
          preventDefaultTouchmoveEvent={true}
          swipingTransitionDuration={400}
          slideOnThumbnailOver={false}
          useWindowKeyDown={true}
          infinite={true}
          onSlide={(currentIndex) => setActiveIndex(currentIndex)}
          renderCustomControls={() => (
            <div className="image-counter">
              <span>{activeIndex + 1}</span>
              <span className="divider">/</span>
              <span className="total">{images.length}</span>
            </div>
          )}
          renderLeftNav={(onClick, disabled) => (
            <button
              type="button"
              className="gallery-nav gallery-nav-left"
              disabled={disabled}
              onClick={onClick}
              aria-label="‰∏ä‰∏ÄÂº†"
            >
              <div className="nav-icon-container">
                <FaChevronLeft size={18} />
              </div>
            </button>
          )}
          renderRightNav={(onClick, disabled) => (
            <button
              type="button"
              className="gallery-nav gallery-nav-right"
              disabled={disabled}
              onClick={onClick}
              aria-label="‰∏ã‰∏ÄÂº†"
            >
              <div className="nav-icon-container">
                <FaChevronRight size={18} />
              </div>
            </button>
          )}
          renderThumbInner={(item) => (
            <div className="custom-thumbnail">
              <div className="thumbnail-loading-placeholder"></div>
              <img 
                src={item.thumbnail} 
                alt={item.thumbnailAlt || "Áº©Áï•Âõæ"} 
                title={item.description || ""}
                className="thumbnail-image"
                loading="lazy"
                onLoad={(e) => {
                  e.target.classList.add('loaded');
                  const placeholder = e.target.previousElementSibling;
                  if (placeholder) placeholder.style.display = 'none';
                }}
                onError={(e) => {
                  console.log('Áº©Áï•ÂõæÂä†ËΩΩÂ§±Ë¥•');
                  const placeholder = e.target.previousElementSibling;
                  if (placeholder) placeholder.style.display = 'none';
                }}
              />
            </div>
          )}
          renderItem={(item, index) => (
            <div className="custom-gallery-slide">
              <div className="image-gradient-overlay"></div>
              <div className="slide-location">
                <FaMapMarkerAlt className="location-icon" /> 
                <span>{item.location || tourData?.location || 'Â°îÊñØÈ©¨Â∞º‰∫ö'}</span>
              </div>
              
              <div className="image-loading-placeholder"></div>
              <img
                src={item.original}
                alt={item.originalAlt || "ÊôØÁÇπÂõæÁâá"}
                className="main-image"
                loading={index === 0 ? "eager" : "lazy"}
                onLoad={(e) => {
                  e.target.classList.add('loaded');
                  const placeholder = e.target.previousElementSibling;
                  if (placeholder) placeholder.style.display = 'none';
                }}
                onError={(e) => {
                  console.log('‰∏ªÂõæÂä†ËΩΩÂ§±Ë¥•');
                  const placeholder = e.target.previousElementSibling;
                  if (placeholder) placeholder.style.display = 'none';
                }}
              />
              
              {item.description && (
                <div className="slide-description">
                  <span>{item.description}</span>
                </div>
              )}
            </div>
          )}
        />
        <div className="gallery-info d-none d-md-block">
          <div className="tour-info-tag">
            <span>Êé¢Á¥¢{tourData?.title || tourData?.name}ÁöÑÁ≤æÂΩ©Áû¨Èó¥</span>
          </div>
          <div className="gallery-count-info">
            ÂÖ±{images.length}Âº†Á≤æÈÄâÁÖßÁâá
          </div>
        </div>
      </div>
    );
  };

  // Â§ÑÁêÜÊàê‰∫∫Êï∞ÈáèÂèòÊõ¥
  const handleAdultCountChange = (e) => {
    const newAdultCount = parseInt(e.target.value) || 1;
    if (newAdultCount < 1) return;
    
    // Êõ¥Êñ∞Êàê‰∫∫Êï∞ÈáèÁä∂ÊÄÅ
    setAdultCount(newAdultCount);
    setSelectedAdultCount(newAdultCount);
    
    // Ë∞ÉÁî®ÂêéÁ´ØAPIËé∑Âèñ‰ª∑Ê†º - ‰∏çËá™Âä®Ë∞ÉÊï¥ÊàøÈó¥Êï∞
    sendParamsToBackend(newAdultCount, childCount, roomCount, selectedHotelLevel);
  };
  
  // Â§ÑÁêÜÂÑøÁ´•Êï∞ÈáèÂèòÊõ¥
  const handleChildCountChange = (e) => {
    const newChildCount = parseInt(e.target.value) || 0;
    if (newChildCount < 0) return;
    
    // Êõ¥Êñ∞Áä∂ÊÄÅ
    setChildCount(newChildCount);
    setSelectedChildCount(newChildCount);
    
    // Êõ¥Êñ∞ÂÑøÁ´•Âπ¥ÈæÑÊï∞ÁªÑ
    const newChildrenAges = [...childrenAges];
    if (newChildCount > childrenAges.length) {
      // Â¶ÇÊûúÂ¢ûÂä†‰∫ÜÂÑøÁ´•ÔºåÊ∑ªÂä†Êñ∞ÁöÑÂπ¥ÈæÑÈ°πÔºåÈªòËÆ§‰∏∫0
      for (let i = childrenAges.length; i < newChildCount; i++) {
        newChildrenAges.push(0);
      }
    } else if (newChildCount < childrenAges.length) {
      // Â¶ÇÊûúÂáèÂ∞ë‰∫ÜÂÑøÁ´•ÔºåÁßªÈô§Â§ö‰ΩôÁöÑÂπ¥ÈæÑÈ°π
      newChildrenAges.splice(newChildCount);
    }
    
    setChildrenAges(newChildrenAges);
    setShowChildAgeInputs(newChildCount > 0);
    
    // ÂèëÈÄÅÂèÇÊï∞Âà∞ÂêéÁ´ØÔºåÂåÖÊã¨ÂÑøÁ´•Âπ¥ÈæÑ
    sendParamsToBackend(adultCount, newChildCount, roomCount, selectedHotelLevel, newChildrenAges);
  };
  
  // Â§ÑÁêÜÊàøÈó¥Êï∞ÈáèÂèòÊõ¥
  const handleRoomCountChange = (e) => {
    const newRoomCount = parseInt(e.target.value) || 1;
    if (newRoomCount < 1) return;
    
    // Êõ¥Êñ∞Áä∂ÊÄÅ
    setRoomCount(newRoomCount);
    setSelectedRoomCount(newRoomCount);
    
    // Ë∞ÉÁî®ÂêéÁ´ØAPIËé∑Âèñ‰ª∑Ê†º
    sendParamsToBackend(adultCount, childCount, newRoomCount, selectedHotelLevel);
  };
  
  // Â§ÑÁêÜÈÖíÂ∫óÊòüÁ∫ßÂèòÊõ¥
  const handleHotelLevelChange = (e) => {
    const newLevel = e.target.value;
    setSelectedHotelLevel(newLevel);
    
    // Ë∞ÉÁî®ÂêéÁ´ØAPIËé∑Âèñ‰ª∑Ê†º
    sendParamsToBackend(adultCount, childCount, roomCount, newLevel);
  };
  
  // Â§ÑÁêÜÊó•ÊúüÈÄâÊã©
  const handleDateChange = (date) => {
    console.log('Êó•ÊúüÈÄâÊã©Âô®ÂèòÊõ¥:', date);
    
    // Â¶ÇÊûúÊó•Êúü‰∏∫nullÔºåËÆæÁΩÆ‰∏∫ÂΩìÂâçÊó•Êúü
    if (date === null) {
      setSelectedDate(new Date());
      return;
    }
    
    // Á°Æ‰øùdateÊòØÊúâÊïàÁöÑDateÂØπË±°
    if (date && date instanceof Date && !isNaN(date.getTime())) {
      setSelectedDate(date);
      
      // Êó•ÊúüÂèòÊõ¥ÂêéÂèØËÉΩÈúÄË¶ÅÈáçÊñ∞Ëé∑Âèñ‰ª∑Ê†º
      if (tourData) {
        sendParamsToBackend(adultCount, childCount, roomCount, selectedHotelLevel);
      }
    } else {
      console.error('Êó†ÊïàÁöÑÊó•ÊúüÂÄº:', date);
      // Â¶ÇÊûú‰º†ÂÖ•ÁöÑÊó•ÊúüÊó†ÊïàÔºåÂàô‰ΩøÁî®ÂΩìÂâçÊó•Êúü
      setSelectedDate(new Date());
    }
  };
  
  // Â§ÑÁêÜÂÑøÁ´•Âπ¥ÈæÑÂèòÂåñ
  const handleChildAgeChange = (index, age) => {
    const newChildrenAges = [...childrenAges];
    newChildrenAges[index] = parseInt(age) || 0;
    setChildrenAges(newChildrenAges);
    
    // ‰ΩøÁî®Èò≤ÊäñÈÅøÂÖçÈ¢ëÁπÅÁöÑAPIË∞ÉÁî®
    if (priceDebounceTimer) {
      clearTimeout(priceDebounceTimer);
    }
    
    const newTimer = setTimeout(() => {
      // ÂèëÈÄÅÊõ¥Êñ∞ÂêéÁöÑÂèÇÊï∞Âà∞ÂêéÁ´Ø
      sendParamsToBackend(adultCount, childCount, roomCount, selectedHotelLevel, newChildrenAges);
    }, 500); // 500msÈò≤Êäñ
    
    setPriceDebounceTimer(newTimer);
  };
  
  // ÂêëÂêéÁ´ØÂèëÈÄÅÂèÇÊï∞ÁöÑÁÆÄÂåñÂáΩÊï∞
  const sendParamsToBackend = (adults, children, rooms, hotelLevel, ages = childrenAges) => {
    // Â¶ÇÊûúÂ∑≤ÁªèÂú®Ë∞ÉÁî®APIÔºåÈÅøÂÖçÈáçÂ§çË∞ÉÁî®
    if (isCallingApiRef.current) {
      console.log('APIË∞ÉÁî®ËøõË°å‰∏≠ÔºåË∑≥ËøáÈáçÂ§çËØ∑Ê±Ç');
      return;
    }
    
    // ËÆæÁΩÆAPIË∞ÉÁî®Áä∂ÊÄÅ
    isCallingApiRef.current = true;
    
    // ËÆæÁΩÆ‰ª∑Ê†ºÂä†ËΩΩÁä∂ÊÄÅ
    setIsPriceLoading(true);
    
    // ÁîüÊàêÂîØ‰∏ÄËØ∑Ê±ÇID
    const requestId = Math.random().toString(36).substring(7);
    
    const requestTourId = id;
    const requestTourType = type === 'group' ? 'group_tour' : 'day_tour';
    const requestAdultCount = parseInt(adults, 10) || 1;
    const requestChildCount = parseInt(children, 10) || 0;
    const requestRoomCount = parseInt(rooms, 10) || 1;
    const requestHotelLevel = hotelLevel || selectedHotelLevel || '4Êòü';
    
    // Á°Æ‰øùÂÑøÁ´•Âπ¥ÈæÑÊï∞ÁªÑÈïøÂ∫¶‰∏éÂÑøÁ´•Êï∞ÈáèÂåπÈÖç
    let validAges = ages || [];
    if (requestChildCount > 0) {
      // Â¶ÇÊûúÂÑøÁ´•Êï∞ÈáèÂ§ß‰∫éÂπ¥ÈæÑÊï∞ÁªÑÈïøÂ∫¶ÔºåÁî®ÈªòËÆ§Âπ¥ÈæÑÂ°´ÂÖÖ
      while (validAges.length < requestChildCount) {
        validAges.push(8); // ÈªòËÆ§8Â≤Å
      }
      // Â¶ÇÊûúÂπ¥ÈæÑÊï∞ÁªÑÈïøÂ∫¶Â§ß‰∫éÂÑøÁ´•Êï∞ÈáèÔºåÊà™Âèñ
      if (validAges.length > requestChildCount) {
        validAges = validAges.slice(0, requestChildCount);
      }
    } else {
      // Â¶ÇÊûúÊ≤°ÊúâÂÑøÁ´•ÔºåÊ∏ÖÁ©∫Âπ¥ÈæÑÊï∞ÁªÑ
      validAges = [];
    }
    
    console.log(`üî¢ [${requestId}] ÂèëÈÄÅÂèÇÊï∞ÁªôÂêéÁ´Ø:`, {
      ‰∫ßÂìÅID: requestTourId,
      ‰∫ßÂìÅÁ±ªÂûã: requestTourType,
      Êàê‰∫∫Êï∞Èáè: requestAdultCount,
      ÂÑøÁ´•Êï∞Èáè: requestChildCount,
      ÈÖíÂ∫óÁ≠âÁ∫ß: requestHotelLevel,
      ÊàøÈó¥Êï∞Èáè: requestRoomCount,
      ÂÑøÁ´•Âπ¥ÈæÑ: validAges.join(','),
      ÂéüÂßãÊàê‰∫∫ÂèÇÊï∞: adults,
      ÊÄª‰∫∫Êï∞: requestAdultCount + requestChildCount
    });
    
    // Áõ¥Êé•‰ΩøÁî®ËÆ°ÁÆóÊé•Âè£
    const fetchPrice = async () => {
      try {
        const priceData = await calculateTourPrice(
          requestTourId,
          requestTourType,
          requestAdultCount,
          requestChildCount,
          requestHotelLevel,
          null, // agentId - ‰ªéÁî®Êà∑Áä∂ÊÄÅËé∑Âèñ
          requestRoomCount,
          null, // userId - ‰ªéÁî®Êà∑Áä∂ÊÄÅËé∑Âèñ
          validAges // ÁªèËøáÈ™åËØÅÁöÑÂÑøÁ´•Âπ¥ÈæÑÊï∞ÁªÑ
        );
        
        console.log(`[${requestId}] ‰ª∑Ê†ºËÆ°ÁÆóÁªìÊûú:`, priceData);
        
        // ‰ª∑Ê†ºËÆ°ÁÆóÂ∑≤ÁßªÈô§ÔºåÁõ¥Êé•‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º
        console.log(`[${requestId}] ‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†ºÔºåÊó†ÈúÄÂä®ÊÄÅËÆ°ÁÆó`);
      } catch (error) {
        console.error(`[${requestId}] ‰ª∑Ê†ºËÆ°ÁÆóÂá∫Èîô:`, error);
          // ‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†ºÔºåÊó†ÈúÄËÆæÁΩÆÁä∂ÊÄÅ
      } finally {
        // Ê∏ÖÈô§Âä†ËΩΩÁä∂ÊÄÅ
        setIsPriceLoading(false);
        // ÈáçÁΩÆAPIË∞ÉÁî®Áä∂ÊÄÅ
        isCallingApiRef.current = false;
      }
    };
    
    // ÊâßË°åAPIË∞ÉÁî®
    fetchPrice();
  };

  // ÂàùÂßãÂåñÊó•ÊúüÈÄâÊã©Áä∂ÊÄÅ
  useEffect(() => {
    if (tourData) {
      // Ê£ÄÊü•ÊòØÂê¶ÊòØÈúÄË¶ÅÈÄâÊã©Êó•ÊúüÁöÑ‰∫ßÂìÅÁ±ªÂûãÔºàÂ¶Ç‰∏ÄÊó•Ê∏∏Ôºâ
      const isDayTour = tourType === 'day_tour' || type === 'day';
      setRequiresDateSelection(isDayTour);
      
      // Ê†πÊçÆ‰∫ßÂìÅÁ±ªÂûãËá™Âä®ËÆ°ÁÆóÂíåËÆæÁΩÆÊó•Êúü
      if (isDayTour) {
        // ‰∏ÄÊó•Ê∏∏ÔºöÈªòËÆ§ÈÄâÊã©ÊòéÂ§©
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        // È™åËØÅÊó•ÊúüÊúâÊïàÊÄß
        if (!isNaN(tomorrow.getTime()) && tomorrow.getTime() > 0) {
          setSelectedDate(tomorrow);
          console.log('‰∏ÄÊó•Ê∏∏Ëá™Âä®ËÆæÁΩÆÊó•Êúü‰∏∫ÊòéÂ§©:', tomorrow);
        } else {
          console.error('‰∏ÄÊó•Ê∏∏Êó•ÊúüËÆ°ÁÆóÂ§±Ë¥•Ôºå‰ΩøÁî®ÂΩìÂâçÊó•Êúü');
          setSelectedDate(new Date());
        }
      } else {
        // Ë∑üÂõ¢Ê∏∏ÔºöÊ†πÊçÆ‰∫ßÂìÅÊï∞ÊçÆËá™Âä®ËÆ°ÁÆóËµ∑ÂßãÂíåÁªìÊùüÊó•Êúü
        let duration = 7; // ÈªòËÆ§7Â§©
        
        // Â∞ùËØï‰ªé‰∏çÂêåÂ≠óÊÆµËé∑ÂèñÂ§©Êï∞
        if (typeof tourData.days === 'number' && tourData.days > 0) {
          // ‰ºòÂÖà‰ΩøÁî®Êï∞Â≠óÂ≠óÊÆµ days
          duration = tourData.days;
          console.log('‰ΩøÁî®Êï∞Â≠óÂ≠óÊÆµ days:', duration);
        } else if (typeof tourData.duration === 'string' && tourData.duration.includes('Â§©')) {
          // Â¶ÇÊûúÊ≤°ÊúâÊï∞Â≠óÂ≠óÊÆµÔºåÂ∞ùËØï‰ªéÂ≠óÁ¨¶‰∏≤Â≠óÊÆµËß£Êûê
          try {
            const match = tourData.duration.match(/(\d+)Â§©/);
            if (match && match[1]) {
              duration = parseInt(match[1]);
              console.log('‰ªéÂ≠óÁ¨¶‰∏≤Â≠óÊÆµ duration Ëß£ÊûêÂ§©Êï∞:', duration);
            }
          } catch (e) {
            console.warn('Ëß£Êûê duration Â≠óÁ¨¶‰∏≤Â§±Ë¥•:', e.message);
          }
        } else if (typeof tourData.duration === 'number' && tourData.duration > 0) {
          // Â¶ÇÊûú duration Êú¨Ë∫´Â∞±ÊòØÊï∞Â≠ó
          duration = tourData.duration;
          console.log('‰ΩøÁî®Êï∞Â≠óÂ≠óÊÆµ duration:', duration);
        }
        
        // ËÆæÁΩÆÂà∞ËææÊó•Êúü‰∏∫7Â§©ÂêéÔºàÁªôÁî®Êà∑ÂáÜÂ§áÊó∂Èó¥Ôºâ
        const arrivalDate = new Date();
        arrivalDate.setDate(arrivalDate.getDate() + 7);
        
        // ËÆæÁΩÆÁ¶ªÂºÄÊó•Êúü‰∏∫Âà∞ËææÊó•Êúü + ‰∫ßÂìÅÂ§©Êï∞ - 1
        const departureDate = new Date(arrivalDate);
        departureDate.setDate(arrivalDate.getDate() + duration - 1);
        
        // È™åËØÅÊó•ÊúüÊúâÊïàÊÄßÂêéÂÜçÊõ¥Êñ∞
        if (!isNaN(arrivalDate.getTime()) && arrivalDate.getTime() > 0) {
          setStartDate(arrivalDate);
        } else {
          console.error('Âà∞ËææÊó•ÊúüËÆ°ÁÆóÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§Êó•Êúü');
          const fallbackDate = new Date();
          fallbackDate.setDate(fallbackDate.getDate() + 7);
          setStartDate(fallbackDate);
        }
        
        if (!isNaN(departureDate.getTime()) && departureDate.getTime() > 0) {
          setEndDate(departureDate);
        } else {
          console.error('Á¶ªÂºÄÊó•ÊúüËÆ°ÁÆóÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§Êó•Êúü');
          const fallbackDate = new Date();
          fallbackDate.setDate(fallbackDate.getDate() + 7 + duration);
          setEndDate(fallbackDate);
        }
        
        console.log(`Ë∑üÂõ¢Ê∏∏Ëá™Âä®ËÆæÁΩÆÊó•Êúü - ‰∫ßÂìÅÂ§©Êï∞:${duration}, Âà∞Ëææ:${arrivalDate.toDateString()}, Á¶ªÂºÄ:${departureDate.toDateString()}`);
        console.log('‰∫ßÂìÅÊï∞ÊçÆËØ¶ÊÉÖ:', { duration: tourData.duration, days: tourData.days, nights: tourData.nights });
      }
    }
  }, [tourData, tourType, type]);  // ÂΩì‰∫ßÂìÅÊï∞ÊçÆÂä†ËΩΩÊó∂ÈáçÊñ∞ËÆ°ÁÆóÊó•Êúü

  useEffect(() => {
    // ËÆ∞ÂΩïÁªÑ‰ª∂ÊåÇËΩΩÂíåÂç∏ËΩΩ
    console.log("TourDetailsÁªÑ‰ª∂Â∑≤ÊåÇËΩΩ");
    // ÈáçÁΩÆAPIË∞ÉÁî®ËÆ°Êï∞Âô®
    hotelPriceApiCallCountRef.current = 0;
    
    return () => {
      console.log("TourDetailsÁªÑ‰ª∂Â∑≤Âç∏ËΩΩ");
      // ÁªÑ‰ª∂Âç∏ËΩΩÊó∂ÈáçÁΩÆÁä∂ÊÄÅ
      initialLoadRef.current = false;
      isCallingApiRef.current = false;
      
      // Ê∏ÖÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑÈò≤ÊäñÂÆöÊó∂Âô®
      if (priceDebounceTimer) {
        clearTimeout(priceDebounceTimer);
      }
    };
  }, [priceDebounceTimer]);

  useEffect(() => {
    const fetchHotelPrices = async () => {
      // Â¶ÇÊûúÂ∑≤ÁªèÂä†ËΩΩËøáÔºå‰∏çÂÜçÈáçÂ§çÂä†ËΩΩ
      if (initialLoadRef.current) {
        console.log("ÈÖíÂ∫ó‰ª∑Ê†ºÂ∑≤Âä†ËΩΩÔºåË∑≥ËøáÈáçÂ§çËØ∑Ê±Ç");
        return;
      }
      
      // ÈôêÂà∂APIË∞ÉÁî®Ê¨°Êï∞ÔºåÈÅøÂÖçÊó†ÈôêÂæ™ÁéØ
      if (hotelPriceApiCallCountRef.current >= 1) {
        console.log(`Â∑≤ËææÂà∞ÈÖíÂ∫ó‰ª∑Ê†ºAPIË∞ÉÁî®‰∏äÈôê(${hotelPriceApiCallCountRef.current}Ê¨°)ÔºåË∑≥ËøáËØ∑Ê±Ç`);
        return;
      }
      
      // Â¢ûÂä†APIË∞ÉÁî®ËÆ°Êï∞
      hotelPriceApiCallCountRef.current++;
      console.log(`[ÂàùÂßãÂåñ] Ëé∑ÂèñÈÖíÂ∫ó‰ª∑Ê†ºÂàóË°® - Á¨¨${hotelPriceApiCallCountRef.current}Ê¨°`);
      
      // Ê†áËÆ∞‰∏∫Â∑≤Âä†ËΩΩ
      initialLoadRef.current = true;
      
      if (type === 'group' || tourType === 'group_tour') {
        console.log(`Ëé∑ÂèñÈÖíÂ∫ó‰ª∑Ê†ºÂàóË°®...(Á¨¨${hotelPriceApiCallCountRef.current}Ê¨°)`);
        
        try {
          const result = await getHotelPrices().catch(err => {
            console.error('Ëé∑ÂèñÈÖíÂ∫ó‰ª∑Ê†ºÂàóË°®Â§±Ë¥•:', err);
            return { code: 0, data: [] };
          });
          
          // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶ÊàêÂäü
          if (result && result.code === 1 && Array.isArray(result.data)) {
            // Â§ÑÁêÜÈÖíÂ∫ó‰ª∑Ê†ºÊï∞ÊçÆ
            const validData = result.data.map(hotel => ({
              ...hotel,
              hotelLevel: hotel.hotelLevel ? String(hotel.hotelLevel) : '4Êòü',
              priceDifference: typeof hotel.priceDifference === 'number' ? hotel.priceDifference : 0,
              id: hotel.id || Math.floor(Math.random() * 10000),
              description: hotel.description || `${hotel.hotelLevel || '4Êòü'}ÈÖíÂ∫ó`
            }));
            
            setHotelPrices(validData);
            
            // ÈÖíÂ∫ó‰ª∑Ê†ºÂàóË°®Â∑≤Ëé∑ÂèñÔºå‰∏çÈúÄË¶ÅÈ¢ùÂ§ñ‰ª∑Ê†ºËÆ°ÁÆó
            console.log('[ÂàùÂßãÂåñ] ÈÖíÂ∫ó‰ª∑Ê†ºÂàóË°®Ëé∑ÂèñÂÆåÊàêÔºå‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º');
          } else {
            setHotelPrices([]);
            
            // ‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†ºÔºå‰∏çÈúÄË¶ÅÈ¢ùÂ§ñËÆ°ÁÆó
            console.log('[ÂàùÂßãÂåñ] ‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º');
          }
        } catch (error) {
          console.error('Ëé∑ÂèñÈÖíÂ∫ó‰ª∑Ê†ºÂàóË°®Â§±Ë¥•:', error);
          setHotelPrices([]);
          
          // ‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†ºÔºå‰∏çÈúÄË¶ÅÈ¢ùÂ§ñËÆ°ÁÆó
          console.log('[ÂàùÂßãÂåñ] Ëé∑ÂèñÈÖíÂ∫ó‰ª∑Ê†ºÂ§±Ë¥•Ôºå‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º');
        }
      } else if (tourData) {
        // ÂØπ‰∫é‰∏ÄÊó•Ê∏∏ÔºåÁõ¥Êé•‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º
        console.log('[ÂàùÂßãÂåñ] ‰∏ÄÊó•Ê∏∏‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º');
      }
    };
    
    // ÂΩìÊóÖÊ∏∏Êï∞ÊçÆÂä†ËΩΩÂÆåÊàêÊó∂ÔºåËé∑ÂèñÈÖíÂ∫ó‰ª∑Ê†ºÂíåÂàùÂßã‰ª∑Ê†º
    if (tourData && id) {
      fetchHotelPrices();
    }
  }, [id, tourData, type, tourType]);
  
  // Êó•ÊúüÂèòÂåñÊó∂‰∏çÈúÄË¶ÅÈáçÊñ∞ËÆ°ÁÆó‰ª∑Ê†ºÔºåÁõ¥Êé•‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†º
  useEffect(() => {
    if (selectedDate && tourData && (tourType === 'day_tour' || type === 'day')) {
      console.log('Êó•ÊúüÂ∑≤ÂèòÊõ¥Ôºå‰ΩøÁî®‰∫ßÂìÅÂü∫Á°Ä‰ª∑Ê†ºÔºàÊó†ÈúÄÈáçÊñ∞ËÆ°ÁÆóÔºâ');
    }
  }, [selectedDate]);

  // Ë∑≥ËΩ¨Âà∞È¢ÑËÆ¢È°µÈù¢
  const handleBooking = () => {
    // Â¶ÇÊûúÁî®Êà∑Êú™ÁôªÂΩïÔºåÂÖàË∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µÈù¢
    if (!isAuthenticated) {
      const redirectPath = `/tours/${id}`;
      navigate('/auth/login', { state: { from: redirectPath } });
      return;
    }
    
    const bookingData = {
      tourId: id,
      tourName: tourData?.title,
      tourDate: selectedDate,
      adultCount: adultCount,
      childCount: childCount,
      roomCount: roomCount,
      childrenAges: childrenAges, // Ê∑ªÂä†ÂÑøÁ´•Âπ¥ÈæÑÊï∞ÁªÑ
      bookingOptions: {
        hotelLevel: selectedHotelLevel,
        pickupLocation: '',
      }
    };
    
    // Ë∑≥ËΩ¨Âà∞È¢ÑËÆ¢È°µÈù¢
    navigate(`/booking?tourId=${id}&type=${type || tourType}`, { state: bookingData });
  };

  return (
    <div className="tour-details-page">
      {renderContent()}
      <div id="date-picker-portal" />
    </div>
  );
  };
  
  export default TourDetails;